---

# The play operates on the local (Ansible control) machine.
- name: Provision instance
  hosts: local
  connection: local
  gather_facts: True

  vars:
    key_pair_name: vyos-build-ami
    # FIXME: I think the below can be done cleaner than this, or more reliably with
    # some sort of ansible defined variable
    key_pair_file: "{{ lookup('env','PWD') }}/playbooks/files/ssh-keys/{{ key_pair_name }}.pem"

    security_group_name: vyos-build-ami

    bootstrap_host_ami_search: ubuntu-trusty-14.04-amd64-server-20150325
    instance_type: t2.micro # Free tier eligible
    volume_size: 4 # GB

  tasks:
    # ---- Configure AWS account ----
    # FIXME: always delete both the local and remote key if they exist, to
    # be able to operate after unclean previous runs
    - name: Make sure that files/ssh-keys directory exists
      file: path={{ lookup('env','PWD') }}/playbooks/files/ssh-keys state=directory

    - name: Create an SSH key pair
      shell: aws ec2 create-key-pair
             --key-name {{ key_pair_name }}
             --query 'KeyMaterial' > {{ key_pair_file }}
             creates={{ key_pair_file }}

    - name: Change permissions on {{ key_pair_file }}
      file: path={{ key_pair_file }} mode=0400

    - name: Check if a security group has already been created by this playbook
      command: aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupName'
      register: describe_security_groups

    - name: Create a security group
      command: aws ec2 create-security-group
               --group-name {{ security_group_name }}
               --description "This security group was generated by ansible playbook vyos_build_ami.yml"
      when: describe_security_groups is defined and
            describe_security_groups.stdout.find('{{ security_group_name }}') == -1

    # TODO: Restrict the security group inbound IP address to ansible control machine?
    # TODO: Allow ICMP, too, for manual status monitoring...(Chinese Internet sucks!)
    - name: Add a rule to the security group that allows inbound SSH traffic
      command: aws ec2 authorize-security-group-ingress
               --group-name {{ security_group_name }}
               --protocol tcp
               --port 22
               --cidr 0.0.0.0/0
      when: describe_security_groups is defined and
            describe_security_groups.stdout.find('{{ security_group_name }}') == -1

    # Look up the AMI id to use based on a search
    - name: Look up AMI ID
      command: aws ec2 describe-images
              --owners 099720109477
              --filters
              "Name=name,Values=*{{ bootstrap_host_ami_search }}*"
              "Name=root-device-type,Values=ebs"
              "Name=virtualization-type,Values=hvm"
              --query "Images[0].ImageId"
      register: bootstrap_ami_id

    # ---- Launch EC2 instance ----
    # TODO: tag it with a name
    - name: Launch an EC2 instance
      command: aws ec2 run-instances
               --image-id {{ bootstrap_ami_id.stdout }}
               --key-name {{ key_pair_name }}
               --security-groups {{ security_group_name }}
               --instance-type {{ instance_type }}
               --block-device-mappings '[{"DeviceName":"/dev/sda1","Ebs":{"DeleteOnTermination":true,"VolumeType":"gp2"}},{"DeviceName":"/dev/sdf","Ebs":{"VolumeSize":{{ volume_size }},"DeleteOnTermination":true,"VolumeType":"gp2"}}]'
               --query 'Instances[*].InstanceId'
      register: instance_id

    - name: Pause for a little to let EC2 instance start initialize
      pause: seconds=5

    - name: Wait for the instance to enter the "running" state
      command: aws ec2 wait instance-running
               --instance-ids {{ instance_id.stdout }}

    - name: Get the public DNS name of the instance
      command: aws ec2 describe-instances
               --instance-id {{ instance_id.stdout }}
               --query 'Reservations[*].Instances[*].PublicDnsName'
      register: instance_dns_name

    - name: Add instance's public DNS name to ansible host group ec2
      add_host: name={{ instance_dns_name.stdout }} groups=ec2

    - name: Add instance's SSH public key to known_hosts
      script: scripts/ec2-fetch-ssh-key-fingerprint {{ instance_id.stdout }} rsa

    # FIXME: this is unnecessary given the above step does it also?
    - name: Wait for instance's SSH port to open
      wait_for: host={{ instance_dns_name.stdout }} port=22 delay=10 state=started
